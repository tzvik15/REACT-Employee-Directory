{"version":3,"sources":["components/search/Search.js","utils/UsersContext.js","components/results/Results.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Form","handleClick","className","type","id","placeholder","onClick","event","searchedFor","target","parentNode","previousElementSibling","value","UsersContext","React","createContext","users","searchTerm","Results","test","useContext","sortFun","a","b","nameA","name","first","toUpperCase","nameB","comparison","scope","sort","map","item","index","last","email","gender","phone","src","picture","thumbnail","alt","filter","axios","get","App","useState","usersState","setUsersState","useEffect","API","then","res","data","results","console","log","Provider","Search","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab1c8f76.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./search.css\";\n\nfunction Form({ handleClick }) {\n  return (\n    <>\n      <h2>Search Employees</h2>\n      <form>\n        <div className=\" input-group\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"inputFiels\"\n            placeholder=\"John Doe\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              type=\"button\"\n              id=\"button-addon2\"\n              onClick={event => {\n                let searchedFor =\n                  event.target.parentNode.previousElementSibling.value;\n                handleClick(searchedFor);\n              }}\n            >\n              Search\n            </button>\n          </div>\n        </div>\n        <small id=\"searchHelp\" className=\"form-text text-muted\">\n          Search for employee/s by name\n        </small>\n      </form>\n    </>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\nconst UsersContext = React.createContext({\n  users: [],\n  searchTerm: \"\"\n});\n\nexport default UsersContext;\n","import React, { useContext } from \"react\";\nimport \"./results.css\";\n\nimport UsersContext from \"../../utils/UsersContext\";\n\nconst Results = () => {\n  const test = useContext(UsersContext);\n\n  const sortFun = (a, b) => {\n    const nameA = a.name.first.toUpperCase();\n    const nameB = b.name.first.toUpperCase();\n\n    let comparison = 0;\n    if (nameA > nameB) {\n      comparison = 1;\n    } else if (nameA < nameB) {\n      comparison = -1;\n    }\n    return comparison;\n  };\n\n  return (\n    <div>\n      <table className=\"table table-striped table-light\">\n        <thead className=\"thead-dark\">\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Gender</th>\n            <th scope=\"col\">Phone #</th>\n            <th scope=\"col\">Picture</th>\n          </tr>\n        </thead>\n        <tbody>\n          {test.searchTerm === \"\"\n            ? test.users.sort(sortFun).map((item, index) => (\n                <>\n                  <tr>\n                    <td>{index + 1}</td>\n                    <td>{item.name.first + \" \" + item.name.last}</td>\n                    <td>{item.email}</td>\n                    <td>{item.gender}</td>\n                    <td>{item.phone}</td>\n                    <td>\n                      <img src={item.picture.thumbnail} alt=\"\"></img>\n                    </td>\n                  </tr>\n                </>\n              ))\n            : test.users\n                .filter((item, index) => {\n                  if (\n                    test.searchTerm === item.name.first ||\n                    test.searchTerm === item.name.last ||\n                    test.searchTerm === item.name.first + \" \" + item.name.last\n                  ) {\n                    return true;\n                  }\n                  return false;\n                })\n                .sort(sortFun).map((item, index) => (\n                  <>\n                    <tr>\n                      <td>{index + 1}</td>\n                      <td>{item.name.first + \" \" + item.name.last}</td>\n                      <td>{item.email}</td>\n                      <td>{item.gender}</td>\n                      <td>{item.phone}</td>\n                      <td>\n                        <img src={item.picture.thumbnail} alt=\"\"></img>\n                      </td>\n                    </tr>\n                  </>\n                ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nexport default Results;\n","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n\n\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/search/Search\";\nimport Result from \"./components/results/Results\";\nimport UsersContext from \"./utils/UsersContext\";\nimport API from \"./utils/API\";\n\nfunction App() {\n  const [usersState, setUsersState] = useState({\n    users: [],\n    searchTerm: \"\"\n  });\n\n  function handleClick(searchedFor) {\n    setUsersState({ ...usersState, searchTerm: searchedFor });\n  }\n \n  useEffect(() => {\n    API.search().then(res => {\n      setUsersState({ ...usersState, users: res.data.results });\n    });\n    return () => {\n      console.log(\"cleaning up\");\n    };\n     // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      <div className=\"App\">\n        <div className=\"jumbotron\">\n          <h1 className=\"title\">Employee-Tracker</h1>\n        </div>\n        <UsersContext.Provider value={usersState}>\n          <div className=\"searchDiv\">\n            <Search handleClick={handleClick} />\n          </div>\n          <div className=\"resultsDisplay\">\n            <Result />\n          </div>\n        </UsersContext.Provider>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}